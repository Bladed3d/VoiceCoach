{"$message_type":"diagnostic","message":"scalar size mismatch: expected 0 bytes but got 8 bytes instead","code":{"code":"E0080","explanation":"A constant value failed to get evaluated.\n\nErroneous code example:\n\n```compile_fail,E0080\nenum Enum {\n    X = (1 << 500),\n    Y = (1 / 0),\n}\n```\n\nThis error indicates that the compiler was unable to sensibly evaluate a\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing an integer overflow are two ways to induce this error.\n\nEnsure that the expressions given can be evaluated as the desired integer type.\n\nSee the [Discriminants] section of the Reference for more information about\nsetting custom integer types on enums using the\n[`repr` attribute][repr-attribute].\n\n[discriminants]: https://doc.rust-lang.org/reference/items/enumerations.html#discriminants\n[repr-attribute]: https://doc.rust-lang.org/reference/type-layout.html#representations\n"},"level":"error","spans":[{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":15006,"byte_end":15014,"line_start":480,"line_end":480,"column_start":29,"column_end":37,"is_primary":true,"text":[],"label":"evaluation of `core::array::<impl core::default::Default for [T; core::::array::{impl#58}::{constant#0}]>::{constant#0}` failed here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":14986,"byte_end":15024,"line_start":480,"line_end":480,"column_start":9,"column_end":47,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":14986,"byte_end":15024,"line_start":480,"line_end":480,"column_start":9,"column_end":47,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":15215,"byte_end":15304,"line_start":490,"line_end":490,"column_start":1,"column_end":90,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"array_impl_default!","def_site_span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":14669,"byte_end":15213,"line_start":472,"line_end":488,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"array_impl_default!","def_site_span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":14669,"byte_end":15213,"line_start":472,"line_end":488,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"array_impl_default!","def_site_span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs","byte_start":14669,"byte_end":15213,"line_start":472,"line_end":488,"column_start":1,"column_end":2,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0080]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: scalar size mismatch: expected 0 bytes but got 8 bytes instead\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0m/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\array\\mod.rs:490:1\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m |\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m = note: evaluation of `core::array::<impl core::default::Default for [T; core::::array::{impl#58}::{constant#0}]>::{constant#0}` failed here\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `array_impl_default` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"type annotations needed: cannot satisfy `[W; 4]: Default`","code":{"code":"E0283","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0283\nlet x = \"hello\".chars().rev().collect();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nA common example is the `collect` method on `Iterator`. It has a generic type\nparameter with a `FromIterator` bound, which for a `char` iterator is\nimplemented by `Vec` and `String` among others. Consider the following snippet\nthat reverses the characters of a string:\n\nIn the first code example, the compiler cannot infer what the type of `x` should\nbe: `Vec<char>` and `String` are both suitable candidates. To specify which type\nto use, you can use a type annotation on `x`:\n\n```\nlet x: Vec<char> = \"hello\".chars().rev().collect();\n```\n\nIt is not necessary to annotate the full type. Once the ambiguity is resolved,\nthe compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nWe can see a self-contained example below:\n\n```compile_fail,E0283\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = foo.into() * 1u32;\n```\n\nThis error can be solved by adding type annotations that provide the missing\ninformation to the compiler. In this case, the solution is to specify the\ntrait's type parameter:\n\n```\nstruct Foo;\n\nimpl Into<u32> for Foo {\n    fn into(self) -> u32 { 1 }\n}\n\nlet foo = Foo;\nlet bar: u32 = Into::<u32>::into(foo) * 1u32;\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\zerocopy-0.8.26\\src\\macros.rs","byte_start":30526,"byte_end":30558,"line_start":877,"line_end":877,"column_start":19,"column_end":51,"is_primary":true,"text":[{"text":"                $($tuple_field_vis $tuple_field_ty),*","highlight_start":19,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\src\\soft.rs","byte_start":6091,"byte_end":6098,"line_start":229,"line_end":229,"column_start":27,"column_end":34,"is_primary":false,"text":[{"text":"    #[derive(Copy, Clone, Default)]","highlight_start":27,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Default)]","def_site_span":{"file_name":"/rustc/29483883eed69d5fb4db01964cdf2af4d86e9cb2\\library\\core\\src\\default.rs","byte_start":3578,"byte_end":3595,"line_start":145,"line_end":145,"column_start":1,"column_end":18,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"multiple `impl`s satisfying `[W; 4]: Default` found in the `core` crate:\n- impl<T> Default for [T; core::::array::{impl#57}::{constant#0}]\n  where T: Default;\n- impl<T> Default for [T; core::::array::{impl#58}::{constant#0}]\n  where T: Default;","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0283]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: type annotations needed: cannot satisfy `[W; 4]: Default`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\Administrator\\.cargo\\registry\\src\\index.crates.io-1949cf8c6b5b557f\\ppv-lite86-0.2.21\\src\\soft.rs:229:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[derive(Copy, Clone, Default)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: multiple `impl`s satisfying `[W; 4]: Default` found in the `core` crate:\u001b[0m\n\u001b[0m            - impl<T> Default for [T; core::::array::{impl#57}::{constant#0}]\u001b[0m\n\u001b[0m              where T: Default;\u001b[0m\n\u001b[0m            - impl<T> Default for [T; core::::array::{impl#58}::{constant#0}]\u001b[0m\n\u001b[0m              where T: Default;\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0080, E0283.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0080, E0283.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0080`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0080`.\u001b[0m\n"}
